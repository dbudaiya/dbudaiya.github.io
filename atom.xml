<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杜审言的Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-10-06T02:23:27.342Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>dushenyan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Centos服务器配置</title>
    <link href="http://example.com/2020/10/06/Centos%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2020/10/06/Centos%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2020-10-06T01:41:35.000Z</published>
    <updated>2020-10-06T02:23:27.342Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Linux-基础学习"><a href="#Linux-基础学习" class="headerlink" title="Linux 基础学习"></a>Linux 基础学习</h1><h2 id="一、Linux-配置-YUM-源"><a href="#一、Linux-配置-YUM-源" class="headerlink" title="一、Linux 配置 YUM 源"></a>一、Linux 配置 YUM 源</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><hr><p>说明…</p><h3 id="2-阿里-YUM-源"><a href="#2-阿里-YUM-源" class="headerlink" title="2. 阿里 YUM 源"></a>2. 阿里 YUM 源</h3><hr><p>加以说明….</p><h4 id="1）打开-Centos-的-YUM-源文件夹"><a href="#1）打开-Centos-的-YUM-源文件夹" class="headerlink" title="1）打开 Centos 的 YUM 源文件夹"></a>1）打开 Centos 的 YUM 源文件夹</h4><blockquote><p>cd /etc/yum.repo.d/</p></blockquote><h4 id="2）用-wget-下载-repo-文件"><a href="#2）用-wget-下载-repo-文件" class="headerlink" title="2）用 wget 下载 repo 文件"></a>2）用 wget 下载 repo 文件</h4><blockquote><p>wget <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p></blockquote><p>如果 wget 命令不生效，说明还没有安装 wget 工具，输入 yum -y install wget 回车进行安装。<br>当前目录是/etc/yum.repos.d/，刚刚下载的 Centos-7.repo 也在这个目录上</p><h4 id="3）-备份系统原来的-repo-文件"><a href="#3）-备份系统原来的-repo-文件" class="headerlink" title="3） 备份系统原来的 repo 文件"></a>3） 备份系统原来的 repo 文件</h4><blockquote><p>mv CentOs-Base.repo CentOs-Base.repo.bak</p></blockquote><p>即是重命名 CentOs-Base.repo -&gt; CentOs-Base.repo.bak</p><h4 id="4）-替换系统原理的-repo-文件"><a href="#4）-替换系统原理的-repo-文件" class="headerlink" title="4） 替换系统原理的 repo 文件"></a>4） 替换系统原理的 repo 文件</h4><blockquote><p>mv Centos-7.repo CentOs-Base.repo</p></blockquote><p>即是重命名 Centos-7.repo -&gt; CentOs-Base.repo</p><h4 id="5）-执行-yum-源更新命令"><a href="#5）-执行-yum-源更新命令" class="headerlink" title="5） 执行 yum 源更新命令"></a>5） 执行 yum 源更新命令</h4><blockquote><p>yum clean all<br>yum makecache<br>yum update</p></blockquote><p>依次执行上述三条命令即配置完毕。</p><h3 id="3-本地-YUM-源"><a href="#3-本地-YUM-源" class="headerlink" title="3.本地 YUM 源"></a>3.本地 YUM 源</h3><hr><h4 id="1）挂载光盘"><a href="#1）挂载光盘" class="headerlink" title="1）挂载光盘"></a>1）挂载光盘</h4><blockquote><p>mount /dev/sr0 /mnt/</p></blockquote><h4 id="2）进入-YUM-源配置目录"><a href="#2）进入-YUM-源配置目录" class="headerlink" title="2）进入 YUM 源配置目录"></a>2）进入 YUM 源配置目录</h4><blockquote><p>cd /etc/yum.repos.d/</p></blockquote><h4 id="3）备份文件夹"><a href="#3）备份文件夹" class="headerlink" title="3）备份文件夹"></a>3）备份文件夹</h4><blockquote><p>mkdir /etc/yum.repos.d/bak</p></blockquote><h4 id="4）移动原有的配置文件到备份文件夹"><a href="#4）移动原有的配置文件到备份文件夹" class="headerlink" title="4）移动原有的配置文件到备份文件夹"></a>4）移动原有的配置文件到备份文件夹</h4><blockquote><p>mv /etc/yum.repos.d/Cent* /etc/yum.repos.d/bak/</p></blockquote><h4 id="5）编辑本地-YUM-源文件"><a href="#5）编辑本地-YUM-源文件" class="headerlink" title="5）编辑本地 YUM 源文件"></a>5）编辑本地 YUM 源文件</h4><blockquote><p>vim /etc/yum.repos.d/local.repo</p></blockquote><p>在 local.repo 文件下添加如下内容即可,保存并退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[local_server]</span><br><span class="line">name &#x3D; this is local</span><br><span class="line">baseurl &#x3D; file:&#x2F;&#x2F;&#x2F;mnt&#x2F;</span><br><span class="line">enable &#x3D; 1</span><br><span class="line">gpgcheck &#x3D; 0</span><br></pre></td></tr></table></figure><h2 id="二、Centos-mini-版无法连接网络"><a href="#二、Centos-mini-版无法连接网络" class="headerlink" title="二、Centos mini 版无法连接网络"></a>二、Centos mini 版无法连接网络</h2><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h3><hr><h3 id="2-Centos-小配置"><a href="#2-Centos-小配置" class="headerlink" title="2. Centos 小配置"></a>2. Centos 小配置</h3><hr><h4 id="（1）使用-setup-配置-IP-地址"><a href="#（1）使用-setup-配置-IP-地址" class="headerlink" title="（1）使用 setup 配置 IP 地址"></a>（1）使用 setup 配置 IP 地址</h4><h4 id="（2）使用-vim-打开网络开关"><a href="#（2）使用-vim-打开网络开关" class="headerlink" title="（2）使用 vim 打开网络开关"></a>（2）使用 vim 打开网络开关</h4><h5 id="1）进入网络配置文件"><a href="#1）进入网络配置文件" class="headerlink" title="1）进入网络配置文件"></a>1）进入网络配置文件</h5><blockquote><p>cd /etc/sysconfig/network-scripts</p></blockquote><h5 id="2）编辑文件"><a href="#2）编辑文件" class="headerlink" title="2）编辑文件"></a>2）编辑文件</h5><blockquote><p>vi ifcfg-eth0</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth0</span><br><span class="line">HWADDR=<span class="number">00</span>:<span class="number">0</span>C:<span class="number">29</span>:<span class="number">4</span>D:EF:AA</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">UUID=<span class="number">08</span>d2b6df-ef56-<span class="number">4570</span>-a496-<span class="number">654</span>e90cd0f3d</span><br><span class="line">ONBOOT=yes#修改ONBOOT为yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=dhcp</span><br></pre></td></tr></table></figure><h5 id="3）-重启网络服务"><a href="#3）-重启网络服务" class="headerlink" title="3） 重启网络服务"></a>3） 重启网络服务</h5><blockquote><p>sudo service network restart</p></blockquote><h4 id="（3）使用-vim-配置-DNS-地址"><a href="#（3）使用-vim-配置-DNS-地址" class="headerlink" title="（3）使用 vim 配置 DNS 地址"></a>（3）使用 vim 配置 DNS 地址</h4><h4 id="（4）给网卡配置多个-IP-地址"><a href="#（4）给网卡配置多个-IP-地址" class="headerlink" title="（4）给网卡配置多个 IP 地址"></a>（4）给网卡配置多个 IP 地址</h4><h4 id="（5）操作网卡与测试网络"><a href="#（5）操作网卡与测试网络" class="headerlink" title="（5）操作网卡与测试网络"></a>（5）操作网卡与测试网络</h4><hr><p>在 linux 系统中，最基本的功能是提供网络服务，掌握基本的操作网卡与测试网络服务的命令至关重要。</p><h5 id="1）操作网卡"><a href="#1）操作网卡" class="headerlink" title="1）操作网卡"></a>1）操作网卡</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 down     #关闭网卡</span><br><span class="line">ifconfig eth0 <span class="keyword">up</span>    #启动网卡</span><br><span class="line">ifconfig eth0 hw ether <span class="number">00</span>:E0:<span class="number">23</span>:<span class="number">35</span>:<span class="number">34</span>:A1# 修改网卡物理地址(MAC地址)</span><br><span class="line">/etc/init.d/network restart #重启网络服务</span><br><span class="line">ifconfig      #查看网卡IP地址与物理地址信息</span><br></pre></td></tr></table></figure><h5 id="2）测试网络状态"><a href="#2）测试网络状态" class="headerlink" title="2）测试网络状态"></a>2）测试网络状态</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">traceroute www.baidu.<span class="keyword">com</span> #显示数据包到达目的地的主机所经过的路由</span><br><span class="line">ping www.baidu.<span class="keyword">com</span> #测试到达www.baidu.<span class="keyword">com</span>网络的连通性</span><br><span class="line">ping -<span class="keyword">c</span> <span class="number">4</span> IP地址# 测试网络连通性性，接收四个包</span><br><span class="line">netstat -I#显示网络接口状态信息</span><br><span class="line">netstat -lpe# 显示所有监控中服务器的Socket和正在使用的程序信息</span><br><span class="line">netstat-r#显示内核表信息</span><br><span class="line">netstat-nr#显示内核表信息</span><br><span class="line">netstat-t#显示TCP/UDP传输协议的连接状态</span><br><span class="line">netstat-<span class="keyword">u</span>#显示内核路由信息表</span><br><span class="line">arp -<span class="keyword">a</span>#查看ARP缓存</span><br><span class="line">arp -s IP地址 <span class="number">00</span>:<span class="number">60</span>:<span class="number">08</span>:<span class="number">27</span>:CE:B2 #添加一个IP地址和MAC地址对应的记录</span><br><span class="line">arp -d IP地址# 删除一个IP地址和MAC地址相应缓存记录</span><br></pre></td></tr></table></figure><h2 id="三、Linux-用户和组管理"><a href="#三、Linux-用户和组管理" class="headerlink" title="三、Linux 用户和组管理"></a>三、Linux 用户和组管理</h2><h3 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1. 概述"></a>1. 概述</h3><hr><p>Linux 操作系统是一个多用户操作系统，它允许多用户同时登录到系统上并使用资源。系统会根据账户来区分每个 用户的文件，进程，任务和工作环境，使得每个用户工作都不受干扰。</p><h3 id="2-使用-Root-用户"><a href="#2-使用-Root-用户" class="headerlink" title="2. 使用 Root 用户"></a>2. 使用 Root 用户</h3><hr><p>在实际生产操作中，我们基本上都是使用超级管理员账户操作 Linux 系统，也就是 Root 用户，Linux 系统默认是关 闭 Root 账户的，我们需要为 Root 用户设置一个初始密码以方便我们使用。</p><h4 id="1）设置-Root-账户密码"><a href="#1）设置-Root-账户密码" class="headerlink" title="1）设置 Root 账户密码"></a>1）设置 Root 账户密码</h4><blockquote><p>sudo passwd root</p></blockquote><h4 id="2）切换到-Root"><a href="#2）切换到-Root" class="headerlink" title="2）切换到 Root"></a>2）切换到 Root</h4><blockquote><p>su</p></blockquote><h4 id="3）设置允许远程登录-Root"><a href="#3）设置允许远程登录-Root" class="headerlink" title="3）设置允许远程登录 Root"></a>3）设置允许远程登录 Root</h4><blockquote><p>vim /etc/ssh/sshd_config</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Authentication: LoginGraceTime <span class="number">120</span></span><br><span class="line">#PermitRootLogin without-password     //注释此行</span><br><span class="line">PermitRootLogin yes                             //加入此行</span><br><span class="line">StrictModes yes</span><br></pre></td></tr></table></figure><h4 id="4）重启服务"><a href="#4）重启服务" class="headerlink" title="4）重启服务"></a>4）重启服务</h4><blockquote><p>service ssh restart</p></blockquote><h3 id="3-用户账户说明"><a href="#3-用户账户说明" class="headerlink" title="3. 用户账户说明"></a>3. 用户账户说明</h3><hr><h4 id="1）普通用户"><a href="#1）普通用户" class="headerlink" title="1）普通用户"></a>1）普通用户</h4><p>普通用户在系统上的任务是进行普通操作</p><h4 id="2）超级管理员"><a href="#2）超级管理员" class="headerlink" title="2）超级管理员"></a>2）超级管理员</h4><p>管理员在系统上的任务是对普通用户和整个系统进行管理。对系统具有绝对的控制权，能够对系统进行一切操作。 用 root 表示，root 用户在系统中拥有高权限，默认下 Ubuntu 用户的 root 用户是不能登录的。</p><h4 id="3）安装时创建的系统用户"><a href="#3）安装时创建的系统用户" class="headerlink" title="3）安装时创建的系统用户"></a>3）安装时创建的系统用户</h4><p>此用户创建时被添加到 admin 组中，在 Ubuntu 中，admin 组中的用户默认是可以使用 sudo 命令来执行只有管理 员才能执行的命令的。如果不使用 sudo 就是一个普通用户。</p><h3 id="4-组账户说明"><a href="#4-组账户说明" class="headerlink" title="4. 组账户说明"></a>4. 组账户说明</h3><h4 id="1）私有组"><a href="#1）私有组" class="headerlink" title="1）私有组"></a>1）私有组</h4><p>当创建一个用户时没有指定属于哪个组，Linux 就会建立一个与用户同名的私有组，此私有组只含有该用户。</p><h4 id="2）标准组"><a href="#2）标准组" class="headerlink" title="2）标准组"></a>2）标准组</h4><p>当创建一个用户时可以选定一个标准组，如果一个用户同时属于多个组时，登录后所属的组为主组，其他的为附加 组</p><h3 id="5-账户系统文件说明"><a href="#5-账户系统文件说明" class="headerlink" title="5. 账户系统文件说明"></a>5. 账户系统文件说明</h3><hr><h4 id="1）-etc-passwd"><a href="#1）-etc-passwd" class="headerlink" title="1）/etc/passwd"></a>1）/etc/passwd</h4><p>每一行代表一个账号，众多账号是系统正常运行所必须的，例如 bin，nobody 每行定义一个用户账户，此文件对所 有用户可读。每行账户包含如下信息：<br>==root:x:0:0:root:/root:/bin/bash==</p><ul><li>用户名： 就是账号，用来对应 UID，root UID 是 0。</li><li>口令： 密码，早期 UNIX 系统密码存在此字段，由于此文件所有用户都可以读取，密码容易泄露，后来这个字 段数据就存放到 /etc/shadow 中，这里只能看到 X。</li><li>用户标示号（UID）： 系统内唯一，root 用户的 UID 为 0，普通用户从 1000 开始，1-999 是系统的标准账户， 500-65536 是可登陆账号。</li><li>组标示号（GID）： 与 /etc/group 相关用来规定组名和 GID 相对应。</li><li>注释： 注释账号</li><li>宿主目录（主文件夹）： 用户登录系统后所进入的目录 root 在 /root/</li><li>命令解释器（shell）： 指定该用户使用的 shell ，默认的是 /bin/bash</li></ul><h4 id="2）-etc-shadow"><a href="#2）-etc-shadow" class="headerlink" title="2）/etc/shadow"></a>2）/etc/shadow</h4><p>为了增加系统的安全性，用户口令通常用 shadow passwords 保护。只有 root 可读。每行包含如下信息：<br>szl:x:1000:1000:szl,,,:/home/szl:/bin/bash<br>==root:$$Reu571.V$Ci/kd.OTzaSGU.TagZ5KjYx2MLzQv2IkZ24E1.yeTT3Pp4o/yniTjus/rRaJ92Z18MVy6suf1 W5uxxurqssel.:17465:0:99999:7:::==</p><ul><li><p>账号名称： 需要和 /etc/passwd 一致。</p></li><li><p>密码：</p><p>经过加密，虽然加密，但不表示不会被破解，该文件默认权限如下：</p><ul><li>-rw——- 1 root root 1560 Oct 26 17:20 passwd 只有 root 能都读写</li><li>最近修改密码日期： 从 1970-1-1 起，到用户后一次更改口令的天数</li><li>密码最小时间间隔： 从 1970-1-1 起，到用户可以更改口令的天数</li><li>密码最大时间间隔： 从 1970-1-1 起，必须更改的口令天数</li><li>密码到期警告时间： 在口令过期之前几天通知</li><li>密码到期后账号宽限时间</li><li>密码到期禁用账户时间： 在用户口令过期后到禁用账户的天数 保留</li></ul></li></ul><h4 id="3）-etc-gshadow"><a href="#3）-etc-gshadow" class="headerlink" title="3）/etc/gshadow"></a>3）/etc/gshadow</h4><p>该文件用户定义用户组口令，组管理员等信息只有 root 用户可读。<br>==root:*::==</p><ul><li>用户组名</li><li>密码列</li><li>用户组管理员的账号</li><li>用户组所属账号</li></ul><h3 id="6-账户管理常见命令"><a href="#6-账户管理常见命令" class="headerlink" title="6. 账户管理常见命令"></a>6. 账户管理常见命令</h3><h4 id="1）增加用户"><a href="#1）增加用户" class="headerlink" title="1）增加用户"></a>1）增加用户</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useradd 用户名</span><br><span class="line">useradd -<span class="keyword">u</span> (UID号)</span><br><span class="line">useradd -<span class="keyword">p</span> (口令)</span><br><span class="line">useradd -g (分组)</span><br><span class="line">useradd -s (SHELL)</span><br><span class="line">useradd -d (用户目录)</span><br></pre></td></tr></table></figure><p>如： useradd jack<br>增加用户名为 jack 的账户</p><h4 id="2）修改用户"><a href="#2）修改用户" class="headerlink" title="2）修改用户"></a>2）修改用户</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">usermod -<span class="keyword">u</span> (新UID)</span><br><span class="line">usermod -d (用户目录)</span><br><span class="line">usermod -g (组名)</span><br><span class="line">usermod -s (SHELL)</span><br><span class="line">usermod -<span class="keyword">p</span> (新口令)</span><br><span class="line">usermod -<span class="keyword">l</span> (新登录名)</span><br><span class="line">usermod -L (锁定用户账号密码)</span><br><span class="line">usermod -U (解锁用户账号)</span><br></pre></td></tr></table></figure><p>如：==usermod -u 1024 -g group2 -G root jack==<br>将 jack 用户 uid 修改为 1024，默认组改为系统中已经存在的 group2，并且加入到系统管理员组</p><h4 id="3）删除用户"><a href="#3）删除用户" class="headerlink" title="3）删除用户"></a>3）删除用户</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 用户名 (删除用户账号) userdel -r 删除账号时同时删除目录</span><br></pre></td></tr></table></figure><p>如： userdel -r jack<br>删除用户名为 jack 的账户并同时删除 jack 的用户目录</p><h4 id="4）组账户维护"><a href="#4）组账户维护" class="headerlink" title="4）组账户维护"></a>4）组账户维护</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组账户名 (创建新组)</span><br><span class="line">groupadd -g 指定组GID</span><br><span class="line">groupmod -g 更改组的GID</span><br><span class="line">groupmod -n 更改组账户名</span><br><span class="line">groupdel 组账户名 (删除指定组账户)</span><br></pre></td></tr></table></figure><h4 id="5）口令维护"><a href="#5）口令维护" class="headerlink" title="5）口令维护"></a>5）口令维护</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户账户名 (设置用户口令)</span><br><span class="line">passwd -<span class="keyword">l</span> 用户账户名 (锁定用户账户)</span><br><span class="line">passwd -<span class="keyword">u</span> 用户账户名 (解锁用户账户)</span><br><span class="line">passwd -d 用户账户名 (删除账户口令)</span><br><span class="line">gpasswd -<span class="keyword">a</span> 用户账户名 组账户名 (将指定用户添加到指定组)</span><br><span class="line">gpasswd -d 用户账户名 组账户名 (将用户从指定组中删除)</span><br><span class="line">gpasswd -A 用户账户名 组账户名 (将用户指定为组的管理员)</span><br></pre></td></tr></table></figure><h4 id="6）用户和组状态"><a href="#6）用户和组状态" class="headerlink" title="6）用户和组状态"></a>6）用户和组状态</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su 用户名(切换用户账户)</span><br><span class="line">id 用户名(显示用户的UID，GID)</span><br><span class="line">whoami (显示当前用户名称)</span><br><span class="line">groups (显示用户所属组)</span><br></pre></td></tr></table></figure><p>四、Linux 文件权限管理</p><ol><li><p>查看文件和目录</p><hr><p>ls –al ==使用 ls 不带参数只显示文件名称，通过==ls –al` 可以显示文件或者目录的权限信息。<br>==ls -l 文件名== 显示信息包括：文件类型 ( d 目录， - 普通文件， l 链接文件)，文件权限，文件的用户，文件的 所属组，文件的大小，文件的创建时间，文件的名称</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rw-r--r-- <span class="number">1</span> jack jack <span class="number">675</span> Oct <span class="number">26</span> <span class="number">17</span>:<span class="number">20</span> .<span class="keyword">profile</span></span><br></pre></td></tr></table></figure><ul><li><p>-：普通文件</p></li><li><p>rw- ：说明用户 jack 有读写权限，没有运行权限</p></li><li><p>r– ：表示用户组 jack 只有读权限，没有写和运行的权限</p></li><li><p>r– ：其他用户只有读权限，没有写权限和运行的权限</p><table><thead><tr><th>-rw-r–r–</th><th>1</th><th>jack</th><th>jack</th><th>675</th><th>Oct 26 17:20</th><th>.profile</th></tr></thead><tbody><tr><td>文档类型及权限</td><td>连接数</td><td>文档所属用户</td><td>文档所属组</td><td>文档大小</td><td>文档最后被修改日期</td><td>文档名称</td></tr></tbody></table></li></ul><table><thead><tr><th>-</th><th>rw-</th><th>r–</th><th>r–</th></tr></thead><tbody><tr><td>文档类型</td><td>文档所有者权限（user）</td><td>文档所属用户权限（group）</td><td>其他用户权限（other）</td></tr></tbody></table><p>1）文档类型</p><ul><li>d 表示目录</li><li>l 表示软连接</li><li>– 表示文件</li><li>c 表示串行端口字符设备文件</li><li>b 表示可供存储的块设备文件</li><li>余下的字符 3 个字符为一组。 r 只读， w 可写， x 可执行， - 表示无此权限</li></ul><p>2）连接数</p><p>指有多少个文件指向同一个索引节点。<br>3）文档所属用户和所属组<br>就是文档属于哪个用户和用户组。文件所属用户和组是可以更改的<br>4）文档大小</p><p>默认是 bytes</p></li><li><p>更改操作权限</p><hr><p>1）chown</p><p>是 change owner 的意思，主要作用就是改变文件或者目录所有者，所有者包含用户和用户组<br>==chown [-R] 用户名称 文件或者目录==<br>==chown [-R] 用户名称 用户组名称 文件或目录==<br>-R：进行递归式的权限更改，将目录下的所有文件、子目录更新为指定用户组权限<br>2）chmod</p><p>改变访问权限<br>chmod [who] [+ | - | =] [mode] 文件名<br>（1）who<br>表示操作对象可以是以下字母的一个或者组合</p><ul><li>u：用户 user</li><li>g：用户组 group</li><li>o：表示其他用户</li><li>a：表示所有用户是系统默认的</li></ul><p>（2）操作符号</p><ul><li>+：表示添加某个权限</li><li>-：表示取消某个权限</li><li>=：赋予给定的权限，取消文档以前的所有</li></ul><p>（3）mode<br>表示可执行的权限，可以是 r、w、x</p><p>（4）文件名<br>文件名可以使空格分开的文件列表<br>（5）示例</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jack@UbuntuBase:~$ <span class="keyword">ls</span> -<span class="keyword">al</span> test.txt  -rw-rw-r-- <span class="number">1</span></span><br><span class="line">jack jack <span class="number">6</span> Nov  <span class="number">2</span> <span class="number">21</span>:<span class="number">47</span> test.txt</span><br><span class="line">jack@UbuntuBase:~$ chmod <span class="keyword">u</span>=rwx,g+r,<span class="keyword">o</span>+r test.txt</span><br><span class="line">jack@UbuntuBase:~$ <span class="keyword">ls</span> -<span class="keyword">al</span> test.txt  -rwxrw-r-- <span class="number">1</span></span><br><span class="line">jack jack <span class="number">6</span> Nov  <span class="number">2</span> <span class="number">21</span>:<span class="number">47</span> test.txt jack@UbuntuBase:~$</span><br></pre></td></tr></table></figure></li><li><p>数字设定法</p><hr><p>数字设定法中数字表示的含义</p><ul><li>0 表示没有任何权限</li><li>1 表示有可执行权限 = ==x==</li><li>2 表示有可写权限 = ==w==</li><li>4 表示有可读权限 = ==r==</li></ul><p>也可以数字来表示权限如==chmod 755 file_name==</p><table><thead><tr><th>rwx</th><th>r-x</th><th>r-x</th></tr></thead><tbody><tr><td>421</td><td>4-1</td><td>4-1</td></tr><tr><td>user</td><td>group</td><td>other</td></tr></tbody></table><ol><li>若要 rwx 属性则 4+2+1=7</li><li>若要 rw- 属性则 4+2=6</li><li>若要 r-x 属性则 4+1=5</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jack@UbuntuBase:~$ chmod <span class="number">777</span> test.txt</span><br><span class="line">jack@UbuntuBase:~$ <span class="keyword">ls</span> -<span class="keyword">al</span> test.txt</span><br><span class="line">-rwxrwxrwx <span class="number">1</span> jack jack <span class="number">6</span> Nov  <span class="number">2</span> <span class="number">21</span>:<span class="number">47</span> test.txt</span><br><span class="line">jack@UbuntuBase:~$ chmod <span class="number">770</span> test.txt</span><br><span class="line">jack@UbuntuBase:~$ <span class="keyword">ls</span> -<span class="keyword">al</span> test.txt -rwxrwx--- <span class="number">1</span> jack jack <span class="number">6</span> Nov  <span class="number">2</span> <span class="number">21</span>:<span class="number">47</span> test.txt</span><br></pre></td></tr></table></figure></li></ol><h2 id="四、Linux"><a href="#四、Linux" class="headerlink" title="四、Linux"></a>四、Linux</h2><h3 id="1-概述-3"><a href="#1-概述-3" class="headerlink" title="1. 概述"></a>1. 概述</h3><hr><p>传统的网络服务程序，FTP、POP、telnet 本质上都是不安全的，因为它们在网络上通过明文传送口令和数据，这些 数据非常容易被截获。SSH 叫做 Secure Shell 。通过 SSH，可以把传输数据进行加密，预防攻击，传输的数据 进行了压缩，可以加快传输速度。</p><h3 id="2-Centos-6-8MIni-版安装图形化界面"><a href="#2-Centos-6-8MIni-版安装图形化界面" class="headerlink" title="2. Centos 6.8MIni 版安装图形化界面"></a>2. Centos 6.8MIni 版安装图形化界面</h3><hr><h4 id="1）安装-Desktop"><a href="#1）安装-Desktop" class="headerlink" title="1）安装 Desktop"></a>1）安装 Desktop</h4><blockquote><p>yum -y groupinstall Desktop</p></blockquote><h4 id="2）安装-X-Windows"><a href="#2）安装-X-Windows" class="headerlink" title="2）安装 X Windows"></a>2）安装 X Windows</h4><blockquote><p>yum -y groupinstall “X Window System”</p></blockquote><h4 id="3）安装中文包"><a href="#3）安装中文包" class="headerlink" title="3）安装中文包"></a>3）安装中文包</h4><blockquote><p>yum -y groupinstall chinese-support</p></blockquote><h4 id="4）编辑配置文件-保存并退出"><a href="#4）编辑配置文件-保存并退出" class="headerlink" title="4）编辑配置文件,保存并退出"></a>4）编辑配置文件,保存并退出</h4><blockquote><p>vi /etc/sysconfig/i18n</p></blockquote><h4 id="5）启动图形化界面"><a href="#5）启动图形化界面" class="headerlink" title="5）启动图形化界面"></a>5）启动图形化界面</h4><blockquote><p>startx</p></blockquote><h4 id="6）中文乱码"><a href="#6）中文乱码" class="headerlink" title="6）中文乱码"></a>6）中文乱码</h4><p>若打开 Teminal 发现字体不正常，解决方法参考：<a href="https://blog.csdn.net/weixin_43611145/article/details/85336268">Centos6.8 图形界面终端 Teminal 字体显示不正常</a></p><h3 id="3-Centos6-8-配置-JAVA-环境"><a href="#3-Centos6-8-配置-JAVA-环境" class="headerlink" title="3. Centos6.8 配置 JAVA 环境"></a>3. Centos6.8 配置 JAVA 环境</h3><hr><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">环境：</span><br><span class="line"><span class="number">1</span>）CentOS-<span class="number">6.8</span>-x86_64-minimal.iso</span><br><span class="line"><span class="number">2</span>）jdk-<span class="number">7</span>u80-linux-x64.rpm</span><br></pre></td></tr></table></figure><h4 id="1）查看-Linux-系统自带的-JDK"><a href="#1）查看-Linux-系统自带的-JDK" class="headerlink" title="1）查看 Linux 系统自带的 JDK"></a>1）查看 Linux 系统自带的 JDK</h4><blockquote><p>rpm -qa |grep java</p></blockquote><h4 id="2）有的话，进行删除"><a href="#2）有的话，进行删除" class="headerlink" title="2）有的话，进行删除"></a>2）有的话，进行删除</h4><blockquote><p>yum remove -y Java-1.7.8-openjdk</p></blockquote><h4 id="3）rpm-安装-JDK"><a href="#3）rpm-安装-JDK" class="headerlink" title="3）rpm 安装 JDK"></a>3）rpm 安装 JDK</h4><blockquote><p>rpm -ivh jdk-7u80-linux-x64.rpm</p></blockquote><h4 id="4）检查是否安装成功"><a href="#4）检查是否安装成功" class="headerlink" title="4）检查是否安装成功"></a>4）检查是否安装成功</h4><blockquote><p>java -version</p></blockquote><h4 id="5）配置环境变量-保存并退出"><a href="#5）配置环境变量-保存并退出" class="headerlink" title="5）配置环境变量,保存并退出"></a>5）配置环境变量,保存并退出</h4><blockquote><p>vi /etc/profile</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</span><br><span class="line"></span><br><span class="line">在该行上面添加</span><br><span class="line">#set java environment</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.<span class="number">7.0</span>_80</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure><h4 id="6）执行-source-使其生效"><a href="#6）执行-source-使其生效" class="headerlink" title="6）执行 source 使其生效"></a>6）执行 source 使其生效</h4><blockquote><p>source /etc/profile</p></blockquote><h4 id="7）检查是否生效"><a href="#7）检查是否生效" class="headerlink" title="7）检查是否生效"></a>7）检查是否生效</h4><blockquote><p>echo $PATH</p></blockquote><p><code> 在系统PATH里面有java等字眼就表示生效</code></p><h4 id="8）测试"><a href="#8）测试" class="headerlink" title="8）测试"></a>8）测试</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用<span class="keyword">vi</span>编写一个Hello.java</span><br><span class="line"></span><br><span class="line">public classHello&#123; </span><br><span class="line">    public static void main(String <span class="keyword">args</span>[]) &#123; </span><br><span class="line">        System.out.println(&quot;hell test !&quot;); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"> 编译： javac Hello.java </span><br><span class="line"> 运行： java Hello</span><br></pre></td></tr></table></figure><h3 id="4-Centos6-8-中安装-Python-环境"><a href="#4-Centos6-8-中安装-Python-环境" class="headerlink" title="4.Centos6.8 中安装 Python 环境"></a>4.Centos6.8 中安装 Python 环境</h3><hr><p>说明</p><h4 id="1-在-Linux-下安装-Python3"><a href="#1-在-Linux-下安装-Python3" class="headerlink" title="1. 在 Linux 下安装 Python3"></a>1. 在 Linux 下安装 Python3</h4><h5 id="1）准备编译环境"><a href="#1）准备编译环境" class="headerlink" title="1）准备编译环境"></a>1）准备编译环境</h5><blockquote><p>yum install zlib-devel bzip2-devel openssl-devel ncurses-devel -y</p></blockquote><h5 id="2）下载-Python3-6-代码包"><a href="#2）下载-Python3-6-代码包" class="headerlink" title="2）下载 Python3.6 代码包"></a>2）下载 Python3.6 代码包</h5><blockquote><p>wget <a href="https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tar.xz">https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tar.xz</a></p></blockquote><h5 id="3）配置压缩环境"><a href="#3）配置压缩环境" class="headerlink" title="3）配置压缩环境"></a>3）配置压缩环境</h5><blockquote><p>yum install -y xz</p></blockquote><h5 id="4）解压-Python3-6-代码包"><a href="#4）解压-Python3-6-代码包" class="headerlink" title="4）解压 Python3.6 代码包"></a>4）解压 Python3.6 代码包</h5><blockquote><p>tar xf Python-3.6.3.tar.xz -C /usr/local/src/</p></blockquote><h5 id="5）进入解压后的目录"><a href="#5）进入解压后的目录" class="headerlink" title="5）进入解压后的目录"></a>5）进入解压后的目录</h5><blockquote><p>cd /usr/local/src/Python-3.6.3/</p></blockquote><h5 id="6）安装编译所需依赖"><a href="#6）安装编译所需依赖" class="headerlink" title="6）安装编译所需依赖"></a>6）安装编译所需依赖</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/<span class="keyword">python3</span></span><br><span class="line">yum install gcc-<span class="keyword">c</span>++ gcc -<span class="keyword">y</span>  #安装编译所需依赖</span><br><span class="line"><span class="keyword">make</span> -<span class="keyword">j</span> <span class="number">4</span> &amp;&amp; <span class="keyword">make</span> install</span><br></pre></td></tr></table></figure><h5 id="7）软连接"><a href="#7）软连接" class="headerlink" title="7）软连接"></a>7）软连接</h5><blockquote><p>ln -s /usr/local/python3/bin/python3.6 /usr/local/bin/python3</p></blockquote><h4 id="2-安装-Python-包"><a href="#2-安装-Python-包" class="headerlink" title="2. 安装 Python 包"></a>2. 安装 Python 包</h4><p>==requests 包==</p><blockquote><p>pip install requests</p></blockquote><p>==paramiko 包==</p><blockquote><p>pip install paramiko</p></blockquote><p>==pumysql 包==</p><blockquote><p>pip install pymysql</p></blockquote><h4 id="3-配置系统默认-Python-版本为-3-6-3"><a href="#3-配置系统默认-Python-版本为-3-6-3" class="headerlink" title="3. 配置系统默认 Python 版本为 3.6.3"></a>3. 配置系统默认 Python 版本为 3.6.3</h4><h5 id="1）修改旧版本"><a href="#1）修改旧版本" class="headerlink" title="1）修改旧版本"></a>1）修改旧版本</h5><blockquote><p>mv /usr/bin/python /usr/bin/python_bak</p></blockquote><h5 id="2）创建新的软连接"><a href="#2）创建新的软连接" class="headerlink" title="2）创建新的软连接"></a>2）创建新的软连接</h5><blockquote><p>ln -s /usr/local/python3/bin/python3 /usr/bin/python</p></blockquote><h5 id="3）检查-Python-的版本"><a href="#3）检查-Python-的版本" class="headerlink" title="3）检查 Python 的版本"></a>3）检查 Python 的版本</h5><blockquote><p>python -V</p></blockquote><p><code>设置检查默认是否为python-3.6.3</code></p><p>####在 Linux 配置 MYSQL 环境</p><h3 id="1-SQL-服务"><a href="#1-SQL-服务" class="headerlink" title="1. SQL 服务"></a>1. SQL 服务</h3><h4 id="1）检查-mysql-客户端"><a href="#1）检查-mysql-客户端" class="headerlink" title="1）检查 mysql 客户端"></a>1）检查 mysql 客户端</h4><blockquote><p>rpm -qa | grep mysql</p></blockquote><p>安装 mysql 客户端</p><blockquote><p>yum install -y mysql</p></blockquote><p>安装 mysql 服务器</p><blockquote><p>yum install -y mysql-service</p></blockquote><p>4）查看所有服务</p><blockquote><p>cd /etc/init.d/</p></blockquote><h4 id="5）临时开启服务"><a href="#5）临时开启服务" class="headerlink" title="5）临时开启服务"></a>5）临时开启服务</h4><blockquote><p>service mysqld start</p></blockquote><p>6.永久自启(随系统启动)</p><blockquote><p>chkconfig mysqld on</p></blockquote><h4 id="6）查看系统自启服务"><a href="#6）查看系统自启服务" class="headerlink" title="6）查看系统自启服务"></a>6）查看系统自启服务</h4><blockquote><p>chkconfig –list</p></blockquote><h4 id="7）查看-mysql-网络接口"><a href="#7）查看-mysql-网络接口" class="headerlink" title="7）查看 mysql 网络接口"></a>7）查看 mysql 网络接口</h4><blockquote><p>netstat -ntpl | grep mysql</p></blockquote><h4 id="8）修改-mysql-配置文件-修改端口号"><a href="#8）修改-mysql-配置文件-修改端口号" class="headerlink" title="8）修改 mysql 配置文件(修改端口号)"></a>8）修改 mysql 配置文件(修改端口号)</h4><p>下面是 mysql 服务器<code>配置</code>文件,添加编码格式为 UTF-8</p><blockquote><p>vim /etc/my.cnf</p></blockquote><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">default-character-<span class="keyword">set</span>=utf8# 添加这段代码</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">user=mysql</span><br><span class="line"># Disabling symbolic-links <span class="keyword">is</span> recommended <span class="keyword">to</span> prevent assorted security risks</span><br><span class="line">symbolic-links=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">[mysqld_safe]</span><br><span class="line"><span class="built_in">log</span>-error=/var/<span class="built_in">log</span>/mysqld.<span class="built_in">log</span></span><br><span class="line">pid-<span class="keyword">file</span>=/var/run/mysqld/mysqld.pid</span><br></pre></td></tr></table></figure><h4 id="9）重启-SQL-服务"><a href="#9）重启-SQL-服务" class="headerlink" title="9）重启 SQL 服务"></a>9）重启 SQL 服务</h4><blockquote><p>service mysqld restart</p></blockquote><h3 id="2-SQL-登录"><a href="#2-SQL-登录" class="headerlink" title="2. SQL 登录"></a>2. SQL 登录</h3><h4 id="初始化数据库设置"><a href="#初始化数据库设置" class="headerlink" title="初始化数据库设置"></a>初始化数据库设置</h4><h5 id="1）初始化数据库的安全设置"><a href="#1）初始化数据库的安全设置" class="headerlink" title="1）初始化数据库的安全设置"></a>1）初始化数据库的安全设置</h5><blockquote><p>mysql_secure_installation<br><code>YYYNY</code></p></blockquote><h5 id="2）设置一个-root-用户允许远程的其他机器登录"><a href="#2）设置一个-root-用户允许远程的其他机器登录" class="headerlink" title="2）设置一个 root 用户允许远程的其他机器登录"></a>2）设置一个 root 用户允许远程的其他机器登录</h5><blockquote><p>grant all on <em>.</em> to root@’%’ identified by ‘123’</p></blockquote><h5 id="3）永久关闭防火墙"><a href="#3）永久关闭防火墙" class="headerlink" title="3）永久关闭防火墙"></a>3）永久关闭防火墙</h5><blockquote><p>chkconfig iptables off</p></blockquote><h5 id="4）开启-SQL-服务"><a href="#4）开启-SQL-服务" class="headerlink" title="4）开启 SQL 服务"></a>4）开启 SQL 服务</h5><blockquote><p>net start MYSQL57</p></blockquote><h5 id="5）登录本地数据库"><a href="#5）登录本地数据库" class="headerlink" title="5）登录本地数据库"></a>5）登录本地数据库</h5><blockquote><p>mysql -hlocalhost -P3306 -uroot -p<br>Enter password: &lt;输入新设的密码 newpassword&gt;</p></blockquote><h4 id="修改-mysqladmin-错误解决方法"><a href="#修改-mysqladmin-错误解决方法" class="headerlink" title="修改 mysqladmin 错误解决方法"></a>修改 mysqladmin 错误解决方法</h4><h5 id="1-停止-mysql-服务"><a href="#1-停止-mysql-服务" class="headerlink" title="1)停止 mysql 服务"></a>1)停止 mysql 服务</h5><blockquote><p>/etc/init.d/mysql stop</p></blockquote><h5 id="2）SQL-全局模式"><a href="#2）SQL-全局模式" class="headerlink" title="2）SQL 全局模式"></a>2）SQL 全局模式</h5><blockquote><p>mysqld_safe –user=mysql –skip-grant-tables –skip-networking &amp;</p></blockquote><h5 id="3-进入数据库"><a href="#3-进入数据库" class="headerlink" title="3) 进入数据库"></a>3) 进入数据库</h5><blockquote><p>mysql -u root mysql</p></blockquote><h5 id="4-更改密码"><a href="#4-更改密码" class="headerlink" title="4)更改密码"></a>4)更改密码</h5><blockquote><p>mysql&gt; UPDATE user SET Password=PASSWORD(‘newpassword’) where USER=’root’ and host=’root’ or host=’localhost’;</p></blockquote><p>把空的用户密码都修改成非空的密码就行了。</p><h5 id="5-退出更改"><a href="#5-退出更改" class="headerlink" title="5)退出更改"></a>5)退出更改</h5><blockquote><p>mysql&gt; FLUSH PRIVILEGES;<br>mysql&gt; quit</p></blockquote><h5 id="7-重启-mysql-服务"><a href="#7-重启-mysql-服务" class="headerlink" title="7)重启 mysql 服务"></a>7)重启 mysql 服务</h5><blockquote><p>/etc/init.d/mysqld restart</p></blockquote><h5 id="6-登录-mysql-数据库"><a href="#6-登录-mysql-数据库" class="headerlink" title="6)登录 mysql 数据库"></a>6)登录 mysql 数据库</h5><blockquote><p>mysql -uroot -p<br>Enter password: &lt;输入新设的密码 newpassword&gt;</p></blockquote><h2 id="二、mysql-代码学习"><a href="#二、mysql-代码学习" class="headerlink" title="二、mysql 代码学习"></a>二、mysql 代码学习</h2><p>Linux 这块还是以<a href="https://www.51zxw.net/List.aspx?cid=644">我要自学网</a>为主学习</p><p><strong>参考网站</strong></p><p><a href="https://blog.csdn.net/weixin_43611145/article/details/86521035">CentOS6.8 精简版安装后安装图形界面</a><br><a href="https://blog.csdn.net/github_39083395/article/details/86520538">超简单 CentOS7 配置阿里云 yum 源</a><br><a href="https://blog.csdn.net/idiandi/article/details/59537194">CentOS6.8 中安装 JAVA 环境</a><br><a href="https://www.cnblogs.com/chillax1314/p/7976839.html">Centos6.8 中安装 Python 环境</a><br><a href="https://blog.csdn.net/yincg/article/details/8464998">修改 mysqladmin 错误解决方法</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git操作命令介绍</title>
    <link href="http://example.com/2020/09/30/Git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2020/09/30/Git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-09-30T09:14:55.000Z</published>
    <updated>2020-10-06T02:19:15.902Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Git-初始化"><a href="#Git-初始化" class="headerlink" title="Git 初始化"></a>Git 初始化</h1><h2 id="Git-初始化基本信息设置"><a href="#Git-初始化基本信息设置" class="headerlink" title="Git 初始化基本信息设置"></a>Git 初始化基本信息设置</h2><p>1.设置用户名</p><blockquote><p>git config –global user.name ‘dbudaiya’</p></blockquote><p>2.设置用户名邮箱</p><blockquote><p>git config –global user.email ‘2645472474@qq.com’</p></blockquote><p>3.查看设置</p><blockquote><p>git config -list</p></blockquote><h2 id="初始化一个新的-Git-仓库"><a href="#初始化一个新的-Git-仓库" class="headerlink" title="初始化一个新的 Git 仓库"></a>初始化一个新的 Git 仓库</h2><h2 id="向仓库中添加文件"><a href="#向仓库中添加文件" class="headerlink" title="向仓库中添加文件"></a>向仓库中添加文件</h2><p>1.创建文件</p><blockquote><p>touch a.txt</p></blockquote><p>2.添加到暂存区</p><blockquote><p>Git add a.txt</p></blockquote><p>3.查看状态</p><blockquote><p>git status</p></blockquote><p>4.提交文件</p><blockquote><p>Git commit -m ‘add a.txt’</p></blockquote><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>1.删除文件</p><blockquote><p>rm a.txt</p></blockquote><p>2.从 Git 中删除文件</p><blockquote><p>git rm a.txt</p></blockquote><p>3.提交操作</p><blockquote><p>git commit -m ‘删除文件’</p></blockquote><h4 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h4><p>1.选中文件路径</p><blockquote><p>cd 文件路径</p></blockquote><p>2.修改文件</p><blockquote><p>vi a.txt</p></blockquote><p>3.提交操作</p><blockquote><p>git commit -m ‘删除文件’</p></blockquote><h4 id="Git-克隆操作"><a href="#Git-克隆操作" class="headerlink" title="Git 克隆操作"></a>Git 克隆操作</h4><h3 id="将远程仓库（github-对应的项目）"><a href="#将远程仓库（github-对应的项目）" class="headerlink" title="将远程仓库（github 对应的项目）"></a>将远程仓库（github 对应的项目）</h3><p>复制到本地</p><blockquote><p>git clone ‘仓库地址’</p></blockquote><p>在 VScode 中配置 git <a href="https://zhuanlan.zhihu.com/p/31417255">https://zhuanlan.zhihu.com/p/31417255</a></p><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><h3 id="Git-的下载"><a href="#Git-的下载" class="headerlink" title="Git 的下载"></a>Git 的下载</h3><p><a href="https://git-scm.com/">Git 下载地址</a>，安装设置全部默认。<br>==并且将 Git 账户已经注册好了。==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意：这里的仓库名可以改为Git用户名.github.io,方便以后再文件中添加文件夹时，</span><br><span class="line">很好的辨认出添加的文件。</span><br></pre></td></tr></table></figure><h2 id="Git-基本配置"><a href="#Git-基本配置" class="headerlink" title="Git 基本配置"></a>Git 基本配置</h2><ol><li>进入你想添加文件夹的目录，点击鼠标右键的==Git Bash Here==,直接进入。</li></ol><blockquote><p>cd 文件夹路径</p></blockquote><ol start="2"><li>添加用户名</li></ol><blockquote><p>git config –global user.name ‘dbudaiya’</p></blockquote><ol start="3"><li>添加邮箱</li></ol><blockquote><p>git config –global user.email ‘2645472474@qq.com’</p></blockquote><ol start="4"><li>clone 克隆远程仓库 <code>如果没文件，则会提示错误信息</code></li></ol><blockquote><p>git clone ‘<a href="https://github.com/dbudaiya/hello-world.git&#39;">https://github.com/dbudaiya/hello-world.git&#39;</a></p></blockquote><ol start="5"><li>然后就可以在文件夹路径在查看到文件，以==Git 用户名.github.io==为准。</li></ol><h3 id="添加文件到远程仓库-这几部是必须的"><a href="#添加文件到远程仓库-这几部是必须的" class="headerlink" title="添加文件到远程仓库(这几部是必须的)"></a>添加文件到远程仓库(这几部是必须的)</h3><p>6.==创建文件 index.html==</p><p>（1）在 Git 窗口中添加，操作跟 Linux 中一样。</p><blockquote><p>cd 文件夹路径<br>mkdir index.html，随便在里面添加一些代码。<br>notepad index.html</p></blockquote><p>（2）在文件管理中添加，找到==文件夹路径-&gt;Git 用户名.github.io==,然后添加 index.html 文件.这种更加快速！！</p><p>7.随便使用以上哪一种方法创建 index.html,然后把 index.html 文件==同步添加到服务器==中</p><blockquote><p>git add index.html</p></blockquote><p>8.最后使用下面代码将文件==推送到服务器==中，发现这里 yes 是描述信息。</p><blockquote><p>git commit -m “yes”</p></blockquote><p>9.确定好推送用户，==验证输入用户名和密码==。</p><blockquote><p>git push origin master</p></blockquote><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p>自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目 。</p><p>Git 可以在 windows、Mac、Linux 全平台系统使用。登录 <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 下载你系统的 Git 软件并进行安装。</p><blockquote><p>windows 用户我更建议安装 git for windows ，下载地址： <a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p><p>包信 Git Base 、Git Gui</p></blockquote><p>安装后通过以下命令查看，如果显示版本号那就是安装成功了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><strong>Gui</strong></p><p>Gui 指 Git 的图形界面管理软件，<a href="https://git-scm.com/downloads/guis">https://git-scm.com/downloads/guis</a> 这个网址列出了多个可供基本上所有平台使用的 Gui 软件。如果要使用 Gui 而非命令行操作，我推荐 <code>sourcetree</code> 这也是我多年使用的软件，功能强大、跨平台、免费。</p><blockquote><p>新人建议直接使用命令行管理 GIT</p></blockquote><h3 id="初始配置"><a href="#初始配置" class="headerlink" title="#初始配置"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE">#</a>初始配置</h3><p>配置文件为 <code>~/.gitconfig</code> ，执行任何 Git 配置命令后文件将自动创建。</p><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;2300071698@qq.com&quot;</span><br><span class="line">git config --global user.name &quot;2300071698@qq.com&quot;</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="#常用命令"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">#</a>常用命令</h3><ol><li>初始化新仓库 <code>git init</code></li><li>克隆代码 <code>git clone https://gitee.com/houdunwang/hdcms.git</code></li><li>克隆指定分支 <code>git clone -b dev git@gitee.com:houdunwang/hdcms.git</code></li><li>查看状态 <code>git status</code></li><li>提交单个文件 <code>git add index.php</code></li><li>提交所有文件 <code>git add -A</code></li><li>使用通配符提交 <code>git add *.js</code></li><li>提交到仓库中 <code>git commit -m &#39;提示信息&#39;</code></li><li>提交已经跟踪过的文件，不需要执行 add <code>git commit -a -m &#39;提交信息&#39;</code></li><li>删除版本库与项目目录中的文件 <code>git rm index.php</code></li><li>只删除版本库中文件但保存项目目录中文件 <code>git rm --cached index.php</code></li><li>修改最后一次提交 <code>git commit --amend</code></li></ol><h2 id="工作流"><a href="#工作流" class="headerlink" title="#工作流"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%B7%A5%E4%BD%9C%E6%B5%81">#</a>工作流</h2><h3 id="基础流程"><a href="#基础流程" class="headerlink" title="#基础流程"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%9F%BA%E7%A1%80%E6%B5%81%E7%A8%8B">#</a>基础流程</h3><ol><li><p>首先克隆你的项目</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/houdunwang/hdcms.git</span><br></pre></td></tr></table></figure></li><li><p>开始开发添加新文件 hd.js，这时新的文件并没有被版本库管理，可以通过以下命令查看没有被管理的文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -n</span><br></pre></td></tr></table></figure></li><li><p>将所有文件提交到暂存区</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>这时再通过 <code>clean</code> 命令查看会发现结果为空，即文件已经被版本库管理了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -n</span><br></pre></td></tr></table></figure></li><li><p>不小心将工作区中的 hd.js 文件删除了，现在可以将暂存区中的 hd.js 恢复回来</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout hd.js</span><br></pre></td></tr></table></figure></li><li><p>完成工作后创建一个新的提交，并使用 -m 选项说明完成的工作</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;购物车开发&#x27;</span><br></pre></td></tr></table></figure></li><li><p>将代码提交到远程服务器，与同事或其他开发者分享代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><h3 id="分支流程"><a href="#分支流程" class="headerlink" title="#分支流程"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%88%86%E6%94%AF%E6%B5%81%E7%A8%8B">#</a>分支流程</h3><p>大部分情况下不会直接在 master 分支工作，我们应该保护这个分支是最终开发完成代码健康可交付运行的。</p><p>所以功能和缺陷(bug)修复都会新建分支完成，除了这个概念外与基本流程使用是一样的。</p><ol><li><p>新建支付功能开发分支</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch pay</span><br></pre></td></tr></table></figure></li><li><p>切换到新分支开始开发，这里的工作内容与上面的基础流程是一样的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout pay</span><br></pre></td></tr></table></figure></li><li><p>开发完成执行提交</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;H5 支付功能&#x27;</span><br></pre></td></tr></table></figure></li><li><p>合并分支到 master</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">合并pay分支的代码</span><br><span class="line">git merge pay</span><br></pre></td></tr></table></figure></li><li><p>提交代码到 master 远程分支</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><h2 id="基本管理"><a href="#基本管理" class="headerlink" title="#基本管理"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%9F%BA%E6%9C%AC%E7%AE%A1%E7%90%86">#</a>基本管理</h2><h3 id="工作区管理"><a href="#工作区管理" class="headerlink" title="#工作区管理"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%AE%A1%E7%90%86">#</a>工作区管理</h3><p>git clean 命令用来从工作目录中删除所有没有跟踪（tracked）过的文件</p><ol><li><code>git clean -n</code>是一次 clean 的演习, 告诉你哪些文件会被删除</li><li><code>git clean -f</code>删除当前目录下没有 tracked 过的文件，不会删除.gitignore 指定的文件</li><li><code>git clean -df</code>删除当前目录下没有被 tracked 过的文件和文件夹</li></ol><h3 id="暂存区管理"><a href="#暂存区管理" class="headerlink" title="#暂存区管理"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E6%9A%82%E5%AD%98%E5%8C%BA%E7%AE%A1%E7%90%86">#</a>暂存区管理</h3><ol><li>提交所有修改和新增的文件 <code>git add .</code></li><li>只提交修改文件不提交新文件 <code>git add -u</code></li><li>放弃没有提交的所有修改 <code>git checkout .</code></li><li>放弃指定文件的修改 <code>git checkout hd.js</code></li><li>查看暂存区文件列表 <code>git ls-files -s</code></li><li>查看暂存区文件内容 <code>git cat-file -p 6e9a94</code></li></ol><h3 id="版本库管理"><a href="#版本库管理" class="headerlink" title="#版本库管理"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E7%89%88%E6%9C%AC%E5%BA%93%E7%AE%A1%E7%90%86">#</a>版本库管理</h3><p>使用 reset 恢复到历史提交点，重置暂存区与工作目录的内容。</p><ol><li>清空工作区和暂存区的改动 <code>git reset --hard</code></li><li>恢复前三个版本 <code>git reset --hard HEAD^^^</code></li><li>保留工作区的内容，把文件差异放进暂存区 <code>git reset --soft</code></li><li>恢复到指定提交版本（先通过 git log 查看版本号) <code>git reset --hard b7b73147ca8d6fc20e451d7b36</code></li></ol><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="#分支管理"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86">#</a>分支管理</h3><p>分支用于为项目增加新功能或修复 Bug 时使用。</p><ol><li><p>创建分支 <code>git branch dev</code></p></li><li><p>查看分支 <code>git branch</code></p></li><li><p>切换分支 <code>git checkout dev</code></p></li><li><p>创建并切换分支 <code>git checkout -b feature/bbs</code></p></li><li><p>合并 dev 分支到 master</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure></li><li><p>删除分支 <code>git branch -d dev</code></p></li><li><p>删除没有合并的分支<code>git branch -D dev</code></p></li><li><p>删除远程分支 <code>git push origin :dev</code></p></li><li><p>查看未合并的分支(切换到 master) <code>git branch --no-merged</code></p></li><li><p>查看已经合并的分支(切换到 master) <code>git branch --merged</code></p></li></ol><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="#日志查看"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8B">#</a>日志查看</h3><ol><li>查看日志 <code>git log</code></li><li>查看最近 2 次提交日志并显示文件差异 <code>git log -p -2</code></li><li>显示已修改的文件清单 <code>git log --name-only</code></li><li>显示新增、修改、删除的文件清单 <code>git log --name-status</code></li><li>一行显示并只显示 SHA-1 的前几个字符 <code>git log --oneline</code></li></ol><h2 id="效率提升"><a href="#效率提升" class="headerlink" title="#效率提升"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87">#</a>效率提升</h2><h3 id="定义别名"><a href="#定义别名" class="headerlink" title="#定义别名"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%AE%9A%E4%B9%89%E5%88%AB%E5%90%8D">#</a>定义别名</h3><p>通过创建命令别名可以减少命令输入量，有几种方式进行设置</p><p><strong>配置文件定义</strong></p><p>修改配置文件 ~/.gitconfig 并添加以下命令别名配置段</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">a = add .</span><br><span class="line">c = commit</span><br><span class="line">s = status</span><br><span class="line">l = log</span><br><span class="line">b = branch</span><br></pre></td></tr></table></figure><p>现在可以使用 <code>git a</code> 实现 <code>git add .</code> 一样的效果了。</p><p><strong>系统配置定义</strong></p><p>window 用户可以修改<code>~/.bashrc</code> 或 <code>~/.bash_profile</code>文件。</p><p>mac/linux 修改 <code>~/.zshrc</code> 文件中定义常用的别名指令，需要首先安装 zsh 命令行扩展</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alias gs=&quot;git status&quot;</span><br><span class="line">alias gc=&quot;git commit -m &quot;</span><br><span class="line">alias gl=&quot;git log --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit  &quot;</span><br><span class="line">alias gb=&quot;git branch&quot;</span><br><span class="line">alias ga=&quot;git add .&quot;</span><br><span class="line">alias go=&quot;git checkout&quot;</span><br></pre></td></tr></table></figure><p>命令行直接使用 <code>gs</code> 即可以实现 <code>git status</code> 一样的效果了。</p><blockquote><p>window 系统需要使用 git for window 中的 <code>Git Base</code> 软件</p></blockquote><h3 id="gitignore"><a href="#gitignore" class="headerlink" title="#.gitignore"></a><a href="http://houdunren.gitee.io/note/git/git.html#gitignore">#</a>.gitignore</h3><p>.gitignore 用于定义忽略提交的文件</p><ul><li>所有空行或者以注释符号 <code>＃</code> 开头的行都会被 Git 忽略。</li><li>匹配模式最后跟反斜杠（<code>/</code>）说明要忽略的是目录。</li><li>可以使用标准的 glob 模式匹配。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.idea</span><br><span class="line">/vendor</span><br><span class="line">.env</span><br><span class="line">/node_modules</span><br><span class="line">/public/storage</span><br><span class="line">*.txt</span><br></pre></td></tr></table></figure><h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="#冲突解决"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3">#</a>冲突解决</h3><p>不同分修改同一个文件或不同开发者修改同一个分支文件都可能造成冲突，造成无法提交代码。</p><ol><li>使用编辑器修改冲突的文件</li><li>添加暂存 <code>git add .</code> 表示已经解决冲突</li><li>git commit 提交完成</li></ol><h3 id="Stashing"><a href="#Stashing" class="headerlink" title="#Stashing"></a><a href="http://houdunren.gitee.io/note/git/git.html#stashing">#</a>Stashing</h3><p>当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。</p><p>“暂存” 可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p><ol><li>储藏工作 <code>git stash</code></li><li>查看储藏列表 <code>git stash list</code></li><li>应用最近的储藏 <code>git stash apply</code></li><li>应用更早的储藏 <code>git stash apply stash@&#123;2&#125;</code></li><li>删除储藏<code>git stash drop stash@&#123;0&#125;</code></li><li>应用并删除储藏 <code>git stash pop</code></li></ol><h3 id="Tag"><a href="#Tag" class="headerlink" title="#Tag"></a><a href="http://houdunren.gitee.io/note/git/git.html#tag">#</a>Tag</h3><p>Git 也可以对某一时间点上的版本打上标签 ，用于发布软件版本如 v1.0</p><ol><li>添加标签 <code>git tag v1.0</code></li><li>列出标签 <code>git tag</code></li><li>推送标签 <code>git push --tags</code></li><li>删除标签 <code>git tag -d v1.0.1</code></li><li>删除远程标签 <code>git push origin :v1.0.1</code></li></ol><h3 id="打包发布"><a href="#打包发布" class="headerlink" title="#打包发布"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83">#</a>打包发布</h3><p>对 mster 分支代码生成压缩包供使用者下载使用，<code>--prefix</code> 指定目录名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git archive master --prefix=&#x27;hdcms/&#x27; --format=zip &gt; hdcms.zip</span><br></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="#远程仓库"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">#</a>远程仓库</h2><p>下面是最热的<code>Github</code>进行讲解，使用<code>码云、codeing</code> 等国内仓库使用方式一致，就不在赘述了。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="#创建仓库"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93">#</a>创建仓库</h3><p>为了完成以下示例，你需要在<code>GitHub</code> 创建好仓库。</p><p><img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526214082941.ad015b93.png" alt="1526214082941"></p><p><img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526214156985.7a278450.png" alt="1526214156985"></p><h3 id="SSH"><a href="#SSH" class="headerlink" title="#SSH"></a><a href="http://houdunren.gitee.io/note/git/git.html#ssh">#</a>SSH</h3><p><strong>生成秘钥</strong></p><p>使用 ssh 连接 Github 发送指令更加安全可靠，也可以免掉每次输入密码的困扰。</p><p>在命令行中输入以下代码（windows 用户使用 Git Bash）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>一直按回车键直到结束。系统会在<code>~/.ssh</code> 目录中生成 <code>id_rsa</code>和<code>id_rsa.pub</code>，即密钥<code>id_rsa</code>和公钥<code>id_rsa.pub</code>。</p><p><strong>向 GitHub 添加秘钥</strong></p><p><img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526219105062-4856466.7379665a.png" alt="1526219105062"></p><p>点击 <code>New SSH key</code> 按钮，添加上面生成的 <code>id_rsa.pub</code> 公钥内容。</p><h3 id="关联远程"><a href="#关联远程" class="headerlink" title="#关联远程"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B">#</a>关联远程</h3><ol><li><p>创建本地库并完成初始提交</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# hd-xj&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加远程仓库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:houdunwang/hd-xj.git</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查看远程库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>推送数据到远程仓库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除远程仓库关联</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>通过 clone 克隆的仓库，本地与远程已经自动关联，上面几步都可以省略。</p></blockquote><h3 id="pull"><a href="#pull" class="headerlink" title="#pull"></a><a href="http://houdunren.gitee.io/note/git/git.html#pull">#</a>pull</h3><p>拉取远程主机某个分支的更新，再与本地的指定分支合并。</p><ol><li>拉取 origin 主机的 ask 分支与本地的 master 分支合并 <code>git pull origin ask:ask</code></li><li>拉取 origin 主机的 ask 分支与当前分支合并 <code>git pull origin ask</code></li><li>如果远程分支与当前本地分支同名直接执行 <code>git pull</code></li></ol><h3 id="push"><a href="#push" class="headerlink" title="#push"></a><a href="http://houdunren.gitee.io/note/git/git.html#push">#</a>push</h3><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相似。</p><ol><li><p>将当前分支推送到<code>origin</code>主机的对应分支(如果当前分支只有一个追踪分支 ，可省略主机名)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用<code>-u</code>选项指定一个默认主机 ,这样以后就可以不加任何参数直播使用<code>git push</code>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除远程<code>ask</code>分支 <code>git push origin --delete ask</code></p></li><li><p>本地 ask 分支关联远程分支并推送 <code>git push --set-upstream origin ask</code></p></li></ol><h3 id="多库提交"><a href="#多库提交" class="headerlink" title="#多库提交"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%A4%9A%E5%BA%93%E6%8F%90%E4%BA%A4">#</a>多库提交</h3><p>我可以将代码提交到多个远程版本库中，比如后盾人的 <a href="https://gitee.com/houdunren/code">课程代码</a> 就提交到了 Github 与 Gitee 两个库中。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 增加一个远程库</span><br><span class="line">git remote add github git@github.com:houdunwang/coding.git</span><br><span class="line"></span><br><span class="line"># 提交到远程库</span><br><span class="line">git push github</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以创建命令一次提交到两个库(注：参考上面的命令设置章节)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias gp=&quot;git push &amp; git push github&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="#自动部署"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2">#</a>自动部署</h2><p>GitHub 设置 <code>WebHook</code></p><p><img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526276371437.88e7de39.png" alt="1526276371437"></p><h3 id="同步脚本"><a href="#同步脚本" class="headerlink" title="#同步脚本"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%90%8C%E6%AD%A5%E8%84%9A%E6%9C%AC">#</a>同步脚本</h3><p>项目中添加处理 webhook 的 webhook.php 文件内容如下，并提交到版本库。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// GitHub Webhook Secret.</span><br><span class="line">// GitHub项目 Settings/Webhooks 中的 Secret</span><br><span class="line">$secret = &quot;houdunren&quot;;</span><br><span class="line"></span><br><span class="line">// Path to your respostory on your server.</span><br><span class="line">// e.g. &quot;/var/www/respostory&quot;</span><br><span class="line">// 项目地址</span><br><span class="line">$path = &quot;/www/wwwroot/xj.houdunren.com&quot;;</span><br><span class="line"></span><br><span class="line">// Headers deliveried from GitHub</span><br><span class="line">$signature = $_SERVER[&#x27;HTTP_X_HUB_SIGNATURE&#x27;];</span><br><span class="line"></span><br><span class="line">if ($signature) &#123;</span><br><span class="line">  $hash = &quot;sha1=&quot;.hash_hmac(&#x27;sha1&#x27;, file_get_contents(&quot;php://input&quot;), $secret);</span><br><span class="line">  if (strcmp($signature, $hash) == 0) &#123;</span><br><span class="line">    echo shell_exec(&quot;cd &#123;$path&#125; &amp;&amp; /usr/bin/git reset --hard origin/master &amp;&amp; /usr/bin/git clean -f &amp;&amp; /usr/bin/git pull 2&gt;&amp;1&quot;);</span><br><span class="line">    exit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http_response_code(404);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="站点配置"><a href="#站点配置" class="headerlink" title="#站点配置"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE">#</a>站点配置</h3><h4 id="创建站点"><a href="#创建站点" class="headerlink" title="#创建站点"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%88%9B%E5%BB%BA%E7%AB%99%E7%82%B9">#</a>创建站点</h4><p>下面示例我使用的是 <code>宝塔</code> 主机面板。 <img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526280838031.9af2ade9.png" alt="1526280838031"></p><p>现在服务器上生成了站点目录 <code>/www/wwwroot/xj.houdunren.com</code> ，因为目录中存在 <code>.user.ini</code> 文件（定义站点可以访问的目录权限），造成不能 <code>clone</code> 代码，将目录随意改名。</p><h4 id="shell-exec"><a href="#shell-exec" class="headerlink" title="#shell_exec"></a><a href="http://houdunren.gitee.io/note/git/git.html#shell-exec">#</a>shell_exec</h4><p>执行 <code>git pull</code> 指令需要使用 <code>shell_exec</code> 函数，删除 shell_exec 禁用函数后重启 PHP。</p><p><img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526281914667.8ec5d311.png" alt="1526281914667"></p><h3 id="clone"><a href="#clone" class="headerlink" title="#clone"></a><a href="http://houdunren.gitee.io/note/git/git.html#clone">#</a>clone</h3><p>登录服务器并使用 https 协议 clone 项目代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xj.houdunren.com -p 22</span><br><span class="line">git clone https://github.com/houdunwang/xj.git xj.houdunren.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="#修改权限"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E4%BF%AE%E6%94%B9%E6%9D%83%E9%99%90">#</a>修改权限</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chown -R www .</span><br><span class="line">chmod -R g+s .</span><br><span class="line">sudo -u www git pull</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在向 GitHub 推送代码后，服务器将自动执行代码拉取，自动部署功能设置完成了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Markdown代码教程</title>
    <link href="http://example.com/2020/09/30/Markdown%E4%BB%A3%E7%A0%81%E6%95%99%E7%A8%8B/"/>
    <id>http://example.com/2020/09/30/Markdown%E4%BB%A3%E7%A0%81%E6%95%99%E7%A8%8B/</id>
    <published>2020-09-29T23:52:43.000Z</published>
    <updated>2020-10-06T02:22:22.136Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="欢迎使用-Markdown"><a href="#欢迎使用-Markdown" class="headerlink" title="欢迎使用 Markdown"></a>欢迎使用 Markdown</h1><p><strong>马克飞翔</strong>是一款印象笔记打。高亮代码造的 Markdown</p><ul><li><strong>功能丰富</strong>：支持代码高亮， <em>aTex</em> ;</li><li><strong>得心应手</strong>：简洁高效的编辑器，提供[桌面客户端][1]以及[l 离线 Chrome app][2]，支持移动端端 Web；</li><li><strong>深度整合</strong>：支持选中笔记本和标签，支持从印象笔记跳转编辑，轻松管理</li></ul><hr><h2 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h2><blockquote><p>Markdonw 是一种轻量级的标记性语言，允人们使用简单的标记文档。 —— <a href="http://www.baidu.com/">维基百科</a></p></blockquote><p>正如你在阅读的这份文档，他使用简单的符号标识不同的标题，将某些文字标识为<strong>粗体</strong>或者<em>斜体</em></p><p>，创建一个<a href="http://www.baidu.com/">百度链接</a>或者一个脚注[^布袋]下面列举几个高级功能，更多语法请按<code>Ctrl+/</code>帮助</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span>(<span class="params">param1=<span class="string">&#x27;&#x27;</span>, param2=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;Greater&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;&#x27;&#x27;interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="LaTtex-公式（略…）"><a href="#LaTtex-公式（略…）" class="headerlink" title="LaTtex 公式（略…）"></a>LaTtex 公式（略…）</h3><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>使用<code>- [ ]</code>和<code>- [x]</code>语法可以创建复选框，实现 todo-list 等功能。列如</p><ul><li>[ ]已完成</li><li>[ x ]代办实现</li></ul><blockquote><p><strong>注意：</strong>目前支持尚不完全，必须在<strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将完全面支持</p></blockquote><p>##</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
