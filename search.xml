<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git操作命令介绍</title>
      <link href="2020/09/30/Git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/09/30/Git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Git-初始化"><a href="#Git-初始化" class="headerlink" title="Git 初始化"></a>Git 初始化</h1><p>[toc]</p><h2 id="Git-初始化基本信息设置"><a href="#Git-初始化基本信息设置" class="headerlink" title="Git 初始化基本信息设置"></a>Git 初始化基本信息设置</h2><p>1.设置用户名</p><blockquote><p>git config –global user.name ‘dbudaiya’</p></blockquote><p>2.设置用户名邮箱</p><blockquote><p>git config –global user.email ‘2645472474@qq.com’</p></blockquote><p>3.查看设置</p><blockquote><p>git config -list</p></blockquote><h2 id="初始化一个新的-Git-仓库"><a href="#初始化一个新的-Git-仓库" class="headerlink" title="初始化一个新的 Git 仓库"></a>初始化一个新的 Git 仓库</h2><h2 id="向仓库中添加文件"><a href="#向仓库中添加文件" class="headerlink" title="向仓库中添加文件"></a>向仓库中添加文件</h2><p>1.创建文件</p><blockquote><p>touch a.txt</p></blockquote><p>2.添加到暂存区</p><blockquote><p>Git add a.txt</p></blockquote><p>3.查看状态</p><blockquote><p>git status</p></blockquote><p>4.提交文件</p><blockquote><p>Git commit -m ‘add a.txt’</p></blockquote><h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>1.删除文件</p><blockquote><p>rm a.txt</p></blockquote><p>2.从 Git 中删除文件</p><blockquote><p>git rm a.txt</p></blockquote><p>3.提交操作</p><blockquote><p>git commit -m ‘删除文件’</p></blockquote><h4 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h4><p>1.选中文件路径</p><blockquote><p>cd 文件路径</p></blockquote><p>2.修改文件</p><blockquote><p>vi a.txt</p></blockquote><p>3.提交操作</p><blockquote><p>git commit -m ‘删除文件’</p></blockquote><h4 id="Git-克隆操作"><a href="#Git-克隆操作" class="headerlink" title="Git 克隆操作"></a>Git 克隆操作</h4><h3 id="将远程仓库（github-对应的项目）"><a href="#将远程仓库（github-对应的项目）" class="headerlink" title="将远程仓库（github 对应的项目）"></a>将远程仓库（github 对应的项目）</h3><p>复制到本地</p><blockquote><p>git clone ‘仓库地址’</p></blockquote><p>在 VScode 中配置 git <a href="https://zhuanlan.zhihu.com/p/31417255">https://zhuanlan.zhihu.com/p/31417255</a></p><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><h3 id="Git-的下载"><a href="#Git-的下载" class="headerlink" title="Git 的下载"></a>Git 的下载</h3><p><a href="https://git-scm.com/">Git 下载地址</a>，安装设置全部默认。<br>==并且将 Git 账户已经注册好了。==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">注意：这里的仓库名可以改为Git用户名.github.io,方便以后再文件中添加文件夹时，</span><br><span class="line">很好的辨认出添加的文件。</span><br></pre></td></tr></table></figure><h2 id="Git-基本配置"><a href="#Git-基本配置" class="headerlink" title="Git 基本配置"></a>Git 基本配置</h2><ol><li>进入你想添加文件夹的目录，点击鼠标右键的==Git Bash Here==,直接进入。</li></ol><blockquote><p>cd 文件夹路径</p></blockquote><ol start="2"><li>添加用户名</li></ol><blockquote><p>git config –global user.name ‘dbudaiya’</p></blockquote><ol start="3"><li>添加邮箱</li></ol><blockquote><p>git config –global user.email ‘2645472474@qq.com’</p></blockquote><ol start="4"><li>clone 克隆远程仓库 <code>如果没文件，则会提示错误信息</code></li></ol><blockquote><p>git clone ‘<a href="https://github.com/dbudaiya/hello-world.git&#39;">https://github.com/dbudaiya/hello-world.git&#39;</a></p></blockquote><ol start="5"><li>然后就可以在文件夹路径在查看到文件，以==Git 用户名.github.io==为准。</li></ol><h3 id="添加文件到远程仓库-这几部是必须的"><a href="#添加文件到远程仓库-这几部是必须的" class="headerlink" title="添加文件到远程仓库(这几部是必须的)"></a>添加文件到远程仓库(这几部是必须的)</h3><p>6.==创建文件 index.html==</p><p>（1）在 Git 窗口中添加，操作跟 Linux 中一样。</p><blockquote><p>cd 文件夹路径<br>mkdir index.html，随便在里面添加一些代码。<br>notepad index.html</p></blockquote><p>（2）在文件管理中添加，找到==文件夹路径-&gt;Git 用户名.github.io==,然后添加 index.html 文件.这种更加快速！！</p><p>7.随便使用以上哪一种方法创建 index.html,然后把 index.html 文件==同步添加到服务器==中</p><blockquote><p>git add index.html</p></blockquote><p>8.最后使用下面代码将文件==推送到服务器==中，发现这里 yes 是描述信息。</p><blockquote><p>git commit -m “yes”</p></blockquote><p>9.确定好推送用户，==验证输入用户名和密码==。</p><blockquote><p>git push origin master</p></blockquote><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><p>自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设定的目标。它的速度飞快，极其适合管理大项目 。</p><p>Git 可以在 windows、Mac、Linux 全平台系统使用。登录 <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 下载你系统的 Git 软件并进行安装。</p><blockquote><p>windows 用户我更建议安装 git for windows ，下载地址： <a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p><p>包信 Git Base 、Git Gui</p></blockquote><p>安装后通过以下命令查看，如果显示版本号那就是安装成功了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p><strong>Gui</strong></p><p>Gui 指 Git 的图形界面管理软件，<a href="https://git-scm.com/downloads/guis">https://git-scm.com/downloads/guis</a> 这个网址列出了多个可供基本上所有平台使用的 Gui 软件。如果要使用 Gui 而非命令行操作，我推荐 <code>sourcetree</code> 这也是我多年使用的软件，功能强大、跨平台、免费。</p><blockquote><p>新人建议直接使用命令行管理 GIT</p></blockquote><h3 id="初始配置"><a href="#初始配置" class="headerlink" title="#初始配置"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE">#</a>初始配置</h3><p>配置文件为 <code>~/.gitconfig</code> ，执行任何 Git 配置命令后文件将自动创建。</p><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;2300071698@qq.com&quot;</span><br><span class="line">git config --global user.name &quot;2300071698@qq.com&quot;</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="#常用命令"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">#</a>常用命令</h3><ol><li>初始化新仓库 <code>git init</code></li><li>克隆代码 <code>git clone https://gitee.com/houdunwang/hdcms.git</code></li><li>克隆指定分支 <code>git clone -b dev git@gitee.com:houdunwang/hdcms.git</code></li><li>查看状态 <code>git status</code></li><li>提交单个文件 <code>git add index.php</code></li><li>提交所有文件 <code>git add -A</code></li><li>使用通配符提交 <code>git add *.js</code></li><li>提交到仓库中 <code>git commit -m &#39;提示信息&#39;</code></li><li>提交已经跟踪过的文件，不需要执行 add <code>git commit -a -m &#39;提交信息&#39;</code></li><li>删除版本库与项目目录中的文件 <code>git rm index.php</code></li><li>只删除版本库中文件但保存项目目录中文件 <code>git rm --cached index.php</code></li><li>修改最后一次提交 <code>git commit --amend</code></li></ol><h2 id="工作流"><a href="#工作流" class="headerlink" title="#工作流"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%B7%A5%E4%BD%9C%E6%B5%81">#</a>工作流</h2><h3 id="基础流程"><a href="#基础流程" class="headerlink" title="#基础流程"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%9F%BA%E7%A1%80%E6%B5%81%E7%A8%8B">#</a>基础流程</h3><ol><li><p>首先克隆你的项目</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://gitee.com/houdunwang/hdcms.git</span><br></pre></td></tr></table></figure></li><li><p>开始开发添加新文件 hd.js，这时新的文件并没有被版本库管理，可以通过以下命令查看没有被管理的文件</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -n</span><br></pre></td></tr></table></figure></li><li><p>将所有文件提交到暂存区</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><p>这时再通过 <code>clean</code> 命令查看会发现结果为空，即文件已经被版本库管理了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clean -n</span><br></pre></td></tr></table></figure></li><li><p>不小心将工作区中的 hd.js 文件删除了，现在可以将暂存区中的 hd.js 恢复回来</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout hd.js</span><br></pre></td></tr></table></figure></li><li><p>完成工作后创建一个新的提交，并使用 -m 选项说明完成的工作</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;购物车开发&#x27;</span><br></pre></td></tr></table></figure></li><li><p>将代码提交到远程服务器，与同事或其他开发者分享代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><h3 id="分支流程"><a href="#分支流程" class="headerlink" title="#分支流程"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%88%86%E6%94%AF%E6%B5%81%E7%A8%8B">#</a>分支流程</h3><p>大部分情况下不会直接在 master 分支工作，我们应该保护这个分支是最终开发完成代码健康可交付运行的。</p><p>所以功能和缺陷(bug)修复都会新建分支完成，除了这个概念外与基本流程使用是一样的。</p><ol><li><p>新建支付功能开发分支</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch pay</span><br></pre></td></tr></table></figure></li><li><p>切换到新分支开始开发，这里的工作内容与上面的基础流程是一样的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout pay</span><br></pre></td></tr></table></figure></li><li><p>开发完成执行提交</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &#x27;H5 支付功能&#x27;</span><br></pre></td></tr></table></figure></li><li><p>合并分支到 master</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">切换到master分支</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">合并pay分支的代码</span><br><span class="line">git merge pay</span><br></pre></td></tr></table></figure></li><li><p>提交代码到 master 远程分支</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></li></ol><h2 id="基本管理"><a href="#基本管理" class="headerlink" title="#基本管理"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%9F%BA%E6%9C%AC%E7%AE%A1%E7%90%86">#</a>基本管理</h2><h3 id="工作区管理"><a href="#工作区管理" class="headerlink" title="#工作区管理"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%AE%A1%E7%90%86">#</a>工作区管理</h3><p>git clean 命令用来从工作目录中删除所有没有跟踪（tracked）过的文件</p><ol><li><code>git clean -n</code>是一次 clean 的演习, 告诉你哪些文件会被删除</li><li><code>git clean -f</code>删除当前目录下没有 tracked 过的文件，不会删除.gitignore 指定的文件</li><li><code>git clean -df</code>删除当前目录下没有被 tracked 过的文件和文件夹</li></ol><h3 id="暂存区管理"><a href="#暂存区管理" class="headerlink" title="#暂存区管理"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E6%9A%82%E5%AD%98%E5%8C%BA%E7%AE%A1%E7%90%86">#</a>暂存区管理</h3><ol><li>提交所有修改和新增的文件 <code>git add .</code></li><li>只提交修改文件不提交新文件 <code>git add -u</code></li><li>放弃没有提交的所有修改 <code>git checkout .</code></li><li>放弃指定文件的修改 <code>git checkout hd.js</code></li><li>查看暂存区文件列表 <code>git ls-files -s</code></li><li>查看暂存区文件内容 <code>git cat-file -p 6e9a94</code></li></ol><h3 id="版本库管理"><a href="#版本库管理" class="headerlink" title="#版本库管理"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E7%89%88%E6%9C%AC%E5%BA%93%E7%AE%A1%E7%90%86">#</a>版本库管理</h3><p>使用 reset 恢复到历史提交点，重置暂存区与工作目录的内容。</p><ol><li>清空工作区和暂存区的改动 <code>git reset --hard</code></li><li>恢复前三个版本 <code>git reset --hard HEAD^^^</code></li><li>保留工作区的内容，把文件差异放进暂存区 <code>git reset --soft</code></li><li>恢复到指定提交版本（先通过 git log 查看版本号) <code>git reset --hard b7b73147ca8d6fc20e451d7b36</code></li></ol><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="#分支管理"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86">#</a>分支管理</h3><p>分支用于为项目增加新功能或修复 Bug 时使用。</p><ol><li><p>创建分支 <code>git branch dev</code></p></li><li><p>查看分支 <code>git branch</code></p></li><li><p>切换分支 <code>git checkout dev</code></p></li><li><p>创建并切换分支 <code>git checkout -b feature/bbs</code></p></li><li><p>合并 dev 分支到 master</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev</span><br></pre></td></tr></table></figure></li><li><p>删除分支 <code>git branch -d dev</code></p></li><li><p>删除没有合并的分支<code>git branch -D dev</code></p></li><li><p>删除远程分支 <code>git push origin :dev</code></p></li><li><p>查看未合并的分支(切换到 master) <code>git branch --no-merged</code></p></li><li><p>查看已经合并的分支(切换到 master) <code>git branch --merged</code></p></li></ol><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="#日志查看"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E6%97%A5%E5%BF%97%E6%9F%A5%E7%9C%8B">#</a>日志查看</h3><ol><li>查看日志 <code>git log</code></li><li>查看最近 2 次提交日志并显示文件差异 <code>git log -p -2</code></li><li>显示已修改的文件清单 <code>git log --name-only</code></li><li>显示新增、修改、删除的文件清单 <code>git log --name-status</code></li><li>一行显示并只显示 SHA-1 的前几个字符 <code>git log --oneline</code></li></ol><h2 id="效率提升"><a href="#效率提升" class="headerlink" title="#效率提升"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E6%95%88%E7%8E%87%E6%8F%90%E5%8D%87">#</a>效率提升</h2><h3 id="定义别名"><a href="#定义别名" class="headerlink" title="#定义别名"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%AE%9A%E4%B9%89%E5%88%AB%E5%90%8D">#</a>定义别名</h3><p>通过创建命令别名可以减少命令输入量，有几种方式进行设置</p><p><strong>配置文件定义</strong></p><p>修改配置文件 ~/.gitconfig 并添加以下命令别名配置段</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[alias]</span><br><span class="line">a = add .</span><br><span class="line">c = commit</span><br><span class="line">s = status</span><br><span class="line">l = log</span><br><span class="line">b = branch</span><br></pre></td></tr></table></figure><p>现在可以使用 <code>git a</code> 实现 <code>git add .</code> 一样的效果了。</p><p><strong>系统配置定义</strong></p><p>window 用户可以修改<code>~/.bashrc</code> 或 <code>~/.bash_profile</code>文件。</p><p>mac/linux 修改 <code>~/.zshrc</code> 文件中定义常用的别名指令，需要首先安装 zsh 命令行扩展</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">alias gs=&quot;git status&quot;</span><br><span class="line">alias gc=&quot;git commit -m &quot;</span><br><span class="line">alias gl=&quot;git log --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit  &quot;</span><br><span class="line">alias gb=&quot;git branch&quot;</span><br><span class="line">alias ga=&quot;git add .&quot;</span><br><span class="line">alias go=&quot;git checkout&quot;</span><br></pre></td></tr></table></figure><p>命令行直接使用 <code>gs</code> 即可以实现 <code>git status</code> 一样的效果了。</p><blockquote><p>window 系统需要使用 git for window 中的 <code>Git Base</code> 软件</p></blockquote><h3 id="gitignore"><a href="#gitignore" class="headerlink" title="#.gitignore"></a><a href="http://houdunren.gitee.io/note/git/git.html#gitignore">#</a>.gitignore</h3><p>.gitignore 用于定义忽略提交的文件</p><ul><li>所有空行或者以注释符号 <code>＃</code> 开头的行都会被 Git 忽略。</li><li>匹配模式最后跟反斜杠（<code>/</code>）说明要忽略的是目录。</li><li>可以使用标准的 glob 模式匹配。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.idea</span><br><span class="line">/vendor</span><br><span class="line">.env</span><br><span class="line">/node_modules</span><br><span class="line">/public/storage</span><br><span class="line">*.txt</span><br></pre></td></tr></table></figure><h3 id="冲突解决"><a href="#冲突解决" class="headerlink" title="#冲突解决"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3">#</a>冲突解决</h3><p>不同分修改同一个文件或不同开发者修改同一个分支文件都可能造成冲突，造成无法提交代码。</p><ol><li>使用编辑器修改冲突的文件</li><li>添加暂存 <code>git add .</code> 表示已经解决冲突</li><li>git commit 提交完成</li></ol><h3 id="Stashing"><a href="#Stashing" class="headerlink" title="#Stashing"></a><a href="http://houdunren.gitee.io/note/git/git.html#stashing">#</a>Stashing</h3><p>当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。</p><p>“暂存” 可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p><ol><li>储藏工作 <code>git stash</code></li><li>查看储藏列表 <code>git stash list</code></li><li>应用最近的储藏 <code>git stash apply</code></li><li>应用更早的储藏 <code>git stash apply stash@&#123;2&#125;</code></li><li>删除储藏<code>git stash drop stash@&#123;0&#125;</code></li><li>应用并删除储藏 <code>git stash pop</code></li></ol><h3 id="Tag"><a href="#Tag" class="headerlink" title="#Tag"></a><a href="http://houdunren.gitee.io/note/git/git.html#tag">#</a>Tag</h3><p>Git 也可以对某一时间点上的版本打上标签 ，用于发布软件版本如 v1.0</p><ol><li>添加标签 <code>git tag v1.0</code></li><li>列出标签 <code>git tag</code></li><li>推送标签 <code>git push --tags</code></li><li>删除标签 <code>git tag -d v1.0.1</code></li><li>删除远程标签 <code>git push origin :v1.0.1</code></li></ol><h3 id="打包发布"><a href="#打包发布" class="headerlink" title="#打包发布"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E6%89%93%E5%8C%85%E5%8F%91%E5%B8%83">#</a>打包发布</h3><p>对 mster 分支代码生成压缩包供使用者下载使用，<code>--prefix</code> 指定目录名</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git archive master --prefix=&#x27;hdcms/&#x27; --format=zip &gt; hdcms.zip</span><br></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="#远程仓库"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">#</a>远程仓库</h2><p>下面是最热的<code>Github</code>进行讲解，使用<code>码云、codeing</code> 等国内仓库使用方式一致，就不在赘述了。</p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="#创建仓库"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93">#</a>创建仓库</h3><p>为了完成以下示例，你需要在<code>GitHub</code> 创建好仓库。</p><p><img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526214082941.ad015b93.png" alt="1526214082941"></p><p><img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526214156985.7a278450.png" alt="1526214156985"></p><h3 id="SSH"><a href="#SSH" class="headerlink" title="#SSH"></a><a href="http://houdunren.gitee.io/note/git/git.html#ssh">#</a>SSH</h3><p><strong>生成秘钥</strong></p><p>使用 ssh 连接 Github 发送指令更加安全可靠，也可以免掉每次输入密码的困扰。</p><p>在命令行中输入以下代码（windows 用户使用 Git Bash）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>一直按回车键直到结束。系统会在<code>~/.ssh</code> 目录中生成 <code>id_rsa</code>和<code>id_rsa.pub</code>，即密钥<code>id_rsa</code>和公钥<code>id_rsa.pub</code>。</p><p><strong>向 GitHub 添加秘钥</strong></p><p><img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526219105062-4856466.7379665a.png" alt="1526219105062"></p><p>点击 <code>New SSH key</code> 按钮，添加上面生成的 <code>id_rsa.pub</code> 公钥内容。</p><h3 id="关联远程"><a href="#关联远程" class="headerlink" title="#关联远程"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%85%B3%E8%81%94%E8%BF%9C%E7%A8%8B">#</a>关联远程</h3><ol><li><p>创建本地库并完成初始提交</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;# hd-xj&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure></li><li><p>添加远程仓库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:houdunwang/hd-xj.git</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查看远程库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>推送数据到远程仓库</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除远程仓库关联</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>通过 clone 克隆的仓库，本地与远程已经自动关联，上面几步都可以省略。</p></blockquote><h3 id="pull"><a href="#pull" class="headerlink" title="#pull"></a><a href="http://houdunren.gitee.io/note/git/git.html#pull">#</a>pull</h3><p>拉取远程主机某个分支的更新，再与本地的指定分支合并。</p><ol><li>拉取 origin 主机的 ask 分支与本地的 master 分支合并 <code>git pull origin ask:ask</code></li><li>拉取 origin 主机的 ask 分支与当前分支合并 <code>git pull origin ask</code></li><li>如果远程分支与当前本地分支同名直接执行 <code>git pull</code></li></ol><h3 id="push"><a href="#push" class="headerlink" title="#push"></a><a href="http://houdunren.gitee.io/note/git/git.html#push">#</a>push</h3><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相似。</p><ol><li><p>将当前分支推送到<code>origin</code>主机的对应分支(如果当前分支只有一个追踪分支 ，可省略主机名)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push origin</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用<code>-u</code>选项指定一个默认主机 ,这样以后就可以不加任何参数直播使用<code>git push</code>。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除远程<code>ask</code>分支 <code>git push origin --delete ask</code></p></li><li><p>本地 ask 分支关联远程分支并推送 <code>git push --set-upstream origin ask</code></p></li></ol><h3 id="多库提交"><a href="#多库提交" class="headerlink" title="#多库提交"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%A4%9A%E5%BA%93%E6%8F%90%E4%BA%A4">#</a>多库提交</h3><p>我可以将代码提交到多个远程版本库中，比如后盾人的 <a href="https://gitee.com/houdunren/code">课程代码</a> 就提交到了 Github 与 Gitee 两个库中。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 增加一个远程库</span><br><span class="line">git remote add github git@github.com:houdunwang/coding.git</span><br><span class="line"></span><br><span class="line"># 提交到远程库</span><br><span class="line">git push github</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以创建命令一次提交到两个库(注：参考上面的命令设置章节)</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias gp=&quot;git push &amp; git push github&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="#自动部署"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2">#</a>自动部署</h2><p>GitHub 设置 <code>WebHook</code></p><p><img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526276371437.88e7de39.png" alt="1526276371437"></p><h3 id="同步脚本"><a href="#同步脚本" class="headerlink" title="#同步脚本"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%90%8C%E6%AD%A5%E8%84%9A%E6%9C%AC">#</a>同步脚本</h3><p>项目中添加处理 webhook 的 webhook.php 文件内容如下，并提交到版本库。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// GitHub Webhook Secret.</span><br><span class="line">// GitHub项目 Settings/Webhooks 中的 Secret</span><br><span class="line">$secret = &quot;houdunren&quot;;</span><br><span class="line"></span><br><span class="line">// Path to your respostory on your server.</span><br><span class="line">// e.g. &quot;/var/www/respostory&quot;</span><br><span class="line">// 项目地址</span><br><span class="line">$path = &quot;/www/wwwroot/xj.houdunren.com&quot;;</span><br><span class="line"></span><br><span class="line">// Headers deliveried from GitHub</span><br><span class="line">$signature = $_SERVER[&#x27;HTTP_X_HUB_SIGNATURE&#x27;];</span><br><span class="line"></span><br><span class="line">if ($signature) &#123;</span><br><span class="line">  $hash = &quot;sha1=&quot;.hash_hmac(&#x27;sha1&#x27;, file_get_contents(&quot;php://input&quot;), $secret);</span><br><span class="line">  if (strcmp($signature, $hash) == 0) &#123;</span><br><span class="line">    echo shell_exec(&quot;cd &#123;$path&#125; &amp;&amp; /usr/bin/git reset --hard origin/master &amp;&amp; /usr/bin/git clean -f &amp;&amp; /usr/bin/git pull 2&gt;&amp;1&quot;);</span><br><span class="line">    exit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http_response_code(404);</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="站点配置"><a href="#站点配置" class="headerlink" title="#站点配置"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E7%AB%99%E7%82%B9%E9%85%8D%E7%BD%AE">#</a>站点配置</h3><h4 id="创建站点"><a href="#创建站点" class="headerlink" title="#创建站点"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E5%88%9B%E5%BB%BA%E7%AB%99%E7%82%B9">#</a>创建站点</h4><p>下面示例我使用的是 <code>宝塔</code> 主机面板。 <img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526280838031.9af2ade9.png" alt="1526280838031"></p><p>现在服务器上生成了站点目录 <code>/www/wwwroot/xj.houdunren.com</code> ，因为目录中存在 <code>.user.ini</code> 文件（定义站点可以访问的目录权限），造成不能 <code>clone</code> 代码，将目录随意改名。</p><h4 id="shell-exec"><a href="#shell-exec" class="headerlink" title="#shell_exec"></a><a href="http://houdunren.gitee.io/note/git/git.html#shell-exec">#</a>shell_exec</h4><p>执行 <code>git pull</code> 指令需要使用 <code>shell_exec</code> 函数，删除 shell_exec 禁用函数后重启 PHP。</p><p><img src= "/img/loading.gif" data-lazy-src="http://houdunren.gitee.io/note/assets/img/1526281914667.8ec5d311.png" alt="1526281914667"></p><h3 id="clone"><a href="#clone" class="headerlink" title="#clone"></a><a href="http://houdunren.gitee.io/note/git/git.html#clone">#</a>clone</h3><p>登录服务器并使用 https 协议 clone 项目代码</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xj.houdunren.com -p 22</span><br><span class="line">git clone https://github.com/houdunwang/xj.git xj.houdunren.com</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="#修改权限"></a><a href="http://houdunren.gitee.io/note/git/git.html#%E4%BF%AE%E6%94%B9%E6%9D%83%E9%99%90">#</a>修改权限</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chown -R www .</span><br><span class="line">chmod -R g+s .</span><br><span class="line">sudo -u www git pull</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在向 GitHub 推送代码后，服务器将自动执行代码拉取，自动部署功能设置完成了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>helloWorld</title>
      <link href="2020/09/30/helloWorld/"/>
      <url>2020/09/30/helloWorld/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="欢迎使用-Markdown"><a href="#欢迎使用-Markdown" class="headerlink" title="欢迎使用 Markdown"></a>欢迎使用 Markdown</h1><p><strong>马克飞翔</strong>是一款印象笔记打。高亮代码造的 Markdown</p><ul><li><strong>功能丰富</strong>：支持代码高亮， <em>aTex</em> ;</li><li><strong>得心应手</strong>：简洁高效的编辑器，提供[桌面客户端][1]以及[l 离线 Chrome app][2]，支持移动端端 Web；</li><li><strong>深度整合</strong>：支持选中笔记本和标签，支持从印象笔记跳转编辑，轻松管理</li></ul><hr><p>[Toc]</p><h2 id="Markdown-简介"><a href="#Markdown-简介" class="headerlink" title="Markdown 简介"></a>Markdown 简介</h2><blockquote><p>Markdonw 是一种轻量级的标记性语言，允人们使用简单的标记文档。 —— <a href="http://www.baidu.com/">维基百科</a></p></blockquote><p>正如你在阅读的这份文档，他使用简单的符号标识不同的标题，将某些文字标识为<strong>粗体</strong>或者<em>斜体</em></p><p>，创建一个<a href="http://www.baidu.com/">百度链接</a>或者一个脚注[^布袋]下面列举几个高级功能，更多语法请按<code>Ctrl+/</code>帮助</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span>(<span class="params">param1=<span class="string">&#x27;&#x27;</span>, param2=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;Greater&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;&#x27;&#x27;interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="LaTtex-公式（略…）"><a href="#LaTtex-公式（略…）" class="headerlink" title="LaTtex 公式（略…）"></a>LaTtex 公式（略…）</h3><h3 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h3><p>使用<code>- [ ]</code>和<code>- [x]</code>语法可以创建复选框，实现 todo-list 等功能。列如</p><ul><li>[ ]已完成</li><li>[ x ]代办实现</li></ul><blockquote><p><strong>注意：</strong>目前支持尚不完全，必须在<strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将完全面支持</p></blockquote><p>##</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
